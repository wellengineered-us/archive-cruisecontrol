/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.    
*/

using System;
using System.IO;
using System.Text;

namespace WellEngineered.CruiseControl.PrivateBuild.NVelocity.Runtime.Parser
{
	/// <summary>  NOTE : This class was originally an ASCII_CharStream autogenerated
    /// by Javacc.  It was then modified via changing class name with appropriate
    /// fixes for CTORS, and mods to readChar().
    /// 
    /// This is safe because we *always* use Reader with this class, and never a
    /// InputStream.  This guarantees that we have a correct stream of 16-bit
    /// chars - all encoding transformations have been done elsewhere, so we
    /// believe that there is no risk in doing this.  Time will tell :)
    /// </summary>

    /// <summary> An implementation of interface CharStream, where the stream is assumed to
    /// contain only ASCII characters (without unicode processing).
    /// </summary>

    public sealed class VelocityCharStream : ICharStream
    {
        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.getEndColumn()">
        /// </seealso>
        public int EndColumn
        {
            get
            {
                return this.bufcolumn[this.bufpos];
            }

        }
        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.getEndLine()">
        /// </seealso>
        public int EndLine
        {
            get
            {
                return this.bufline[this.bufpos];
            }

        }
        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.getBeginColumn()">
        /// </seealso>
        public int BeginColumn
        {
            get
            {
                return this.bufcolumn[this.tokenBegin];
            }

        }
        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.getBeginLine()">
        /// </seealso>
        public int BeginLine
        {
            get
            {
                return this.bufline[this.tokenBegin];
            }

        }
        public const bool staticFlag = false;
        internal int bufsize;
        private int nextBufExpand;
        internal int available;
        internal int tokenBegin;

        public int bufpos = -1;
        private int[] bufline;
        private int[] bufcolumn;

        private int column = 0;
        private int line = 1;

        private bool prevCharIsCR = false;
        private bool prevCharIsLF = false;

        private TextReader inputStream;

        private char[] buffer;
        private int maxNextCharInd = 0;
        private int inBuf = 0;

        private void ExpandBuff(bool wrapAround)
        {
            char[] newbuffer = new char[this.bufsize + this.nextBufExpand];
            int[] newbufline = new int[this.bufsize + this.nextBufExpand];
            int[] newbufcolumn = new int[this.bufsize + this.nextBufExpand];

            try
            {
                if (wrapAround)
                {
                    Array.Copy(this.buffer, this.tokenBegin, newbuffer, 0, this.bufsize - this.tokenBegin);
                    Array.Copy(this.buffer, 0, newbuffer, this.bufsize - this.tokenBegin, this.bufpos);
                    this.buffer = newbuffer;

                    Array.Copy(this.bufline, this.tokenBegin, newbufline, 0, this.bufsize - this.tokenBegin);
                    Array.Copy(this.bufline, 0, newbufline, this.bufsize - this.tokenBegin, this.bufpos);
                    this.bufline = newbufline;

                    Array.Copy(this.bufcolumn, this.tokenBegin, newbufcolumn, 0, this.bufsize - this.tokenBegin);
                    Array.Copy(this.bufcolumn, 0, newbufcolumn, this.bufsize - this.tokenBegin, this.bufpos);
                    this.bufcolumn = newbufcolumn;

                    this.maxNextCharInd = (this.bufpos += (this.bufsize - this.tokenBegin));
                }
                else
                {
                    Array.Copy(this.buffer, this.tokenBegin, newbuffer, 0, this.bufsize - this.tokenBegin);
                    this.buffer = newbuffer;

                    Array.Copy(this.bufline, this.tokenBegin, newbufline, 0, this.bufsize - this.tokenBegin);
                    this.bufline = newbufline;

                    Array.Copy(this.bufcolumn, this.tokenBegin, newbufcolumn, 0, this.bufsize - this.tokenBegin);
                    this.bufcolumn = newbufcolumn;

                    this.maxNextCharInd = (this.bufpos -= this.tokenBegin);
                }
            }
            catch (System.Exception t)
            {
                throw new System.ApplicationException(t.Message);
            }


            this.bufsize += this.nextBufExpand;
            this.nextBufExpand = this.bufsize;
            this.available = this.bufsize;
            this.tokenBegin = 0;
        }

        private bool FillBuff()
        {
            if (this.maxNextCharInd == this.available)
            {
                if (this.available == this.bufsize)
                {
                    if (this.tokenBegin > this.nextBufExpand)
                    {
                        this.bufpos = this.maxNextCharInd = 0;
                        this.available = this.tokenBegin;
                    }
                    else if (this.tokenBegin < 0)
                    {
                        this.bufpos = this.maxNextCharInd = 0;
                    }
                    else
                    {
                        this.ExpandBuff(false);
                    }
                }
                else if (this.available > this.tokenBegin)
                {
                    this.available = this.bufsize;
                }
                else if ((this.tokenBegin - this.available) < this.nextBufExpand)
                {
                    this.ExpandBuff(true);
                }
                else
                {
                    this.available = this.tokenBegin;
                }
            }

            int i;
            try
            {
                if ((i = this.inputStream.Read(this.buffer, this.maxNextCharInd, this.available - this.maxNextCharInd)) <= 0)
                {
                    this.inputStream.Close();
                    throw new System.IO.IOException();
                }
                else
                {
                    this.maxNextCharInd += i;
                }
                return true;
            }
            catch
            {
                --this.bufpos;
                this.Backup(0);
                if (this.tokenBegin == -1)
                {
                    this.tokenBegin = this.bufpos;
                }

                return false;
            }
        }

        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.BeginToken()">
        /// </seealso>
        public char BeginToken()
        {
            this.tokenBegin = -1;
            char c = this.ReadChar();
            this.tokenBegin = this.bufpos;

            return c;
        }

        private void UpdateLineColumn(char c)
        {
            this.column++;

            if (this.prevCharIsLF)
            {
                this.prevCharIsLF = false;
                this.line += (this.column = 1);
            }
            else if (this.prevCharIsCR)
            {
                this.prevCharIsCR = false;
                if (c == '\n')
                {
                    this.prevCharIsLF = true;
                }
                else
                {
                    this.line += (this.column = 1);
                }
            }

            switch (c)
            {

                case '\r':
                    this.prevCharIsCR = true;
                    break;

                case '\n':
                    this.prevCharIsLF = true;
                    break;

                case '\t':
                    this.column--;
                    this.column += (8 - (this.column & 7));
                    break;

                default:
                    break;

            }

            this.bufline[this.bufpos] = this.line;
            this.bufcolumn[this.bufpos] = this.column;
        }

        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.readChar()">
        /// </seealso>
        public char ReadChar()
        {
            if (this.inBuf > 0)
            {
                --this.inBuf;

                /*
                *  was : return (char)((char)0xff & buffer[(bufpos == bufsize - 1) ? (bufpos = 0) : ++bufpos]);
                */
                return this.buffer[(this.bufpos == this.bufsize - 1) ? (this.bufpos = 0) : ++this.bufpos];
            }

            if (++this.bufpos >= this.maxNextCharInd)
            {
                if (!this.FillBuff())
                {
                    throw new IOException();
                }
            }

            /*
            *  was : char c = (char)((char)0xff & buffer[bufpos]);
            */
            char c = this.buffer[this.bufpos];

            this.UpdateLineColumn(c);
            return (c);
        }

        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.backup(int)">
        /// </seealso>
        public void Backup(int amount)
        {

            this.inBuf += amount;
            if ((this.bufpos -= amount) < 0)
                this.bufpos += this.bufsize;
        }

        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        /// <param name="buffersize">
        /// </param>
        public VelocityCharStream(TextReader dstream, int startline, int startcolumn, int buffersize)
        {
            this.inputStream = dstream;
            this.line = startline;
            this.column = startcolumn - 1;

            this.available = this.bufsize = this.nextBufExpand = buffersize;
            this.buffer = new char[buffersize];
            this.bufline = new int[buffersize];
            this.bufcolumn = new int[buffersize];
        }

        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        public VelocityCharStream(TextReader dstream, int startline, int startcolumn)
            : this(dstream, startline, startcolumn, 4096)
        {
        }
        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        /// <param name="buffersize">
        /// </param>
        public void ReInit(TextReader dstream, int startline, int startcolumn, int buffersize)
        {
            this.inputStream = dstream;
            this.line = startline;
            this.column = startcolumn - 1;

            if (this.buffer == null || buffersize != this.buffer.Length)
            {
                this.available = this.bufsize = this.nextBufExpand = buffersize;
                this.buffer = new char[buffersize];
                this.bufline = new int[buffersize];
                this.bufcolumn = new int[buffersize];
            }
            this.prevCharIsLF = this.prevCharIsCR = false;
            this.tokenBegin = this.inBuf = this.maxNextCharInd = 0;
            this.bufpos = -1;
        }

        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        public void ReInit(TextReader dstream, int startline, int startcolumn)
        {
            this.ReInit(dstream, startline, startcolumn, 4096);
        }
        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        /// <param name="buffersize">
        /// </param>
        public VelocityCharStream(Stream dstream, int startline, int startcolumn, int buffersize)
            : this(new StreamReader(dstream, Encoding.Default), startline, startcolumn, buffersize)
        {
        }

        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        public VelocityCharStream(Stream dstream, int startline, int startcolumn)
            : this(dstream, startline, startcolumn, 4096)
        {
        }

        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        /// <param name="buffersize">
        /// </param>
        public void ReInit(Stream dstream, int startline, int startcolumn, int buffersize)
        {
            this.ReInit(new StreamReader(dstream, Encoding.Default), startline, startcolumn, buffersize);
        }
        /// <param name="dstream">
        /// </param>
        /// <param name="startline">
        /// </param>
        /// <param name="startcolumn">
        /// </param>
        public void ReInit(Stream dstream, int startline, int startcolumn)
        {
            this.ReInit(dstream, startline, startcolumn, 4096);
        }
        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.GetImage()">
        /// </seealso>
        public string GetImage()
        {
            if (this.bufpos >= this.tokenBegin)
            {
                return new string(this.buffer, this.tokenBegin, this.bufpos - this.tokenBegin + 1);
            }
            else
            {
                return new string(this.buffer, this.tokenBegin, this.bufsize - this.tokenBegin) + new string(this.buffer, 0, this.bufpos + 1);
            }
        }

        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.GetSuffix(int)">
        /// </seealso>
        public char[] GetSuffix(int len)
        {
            char[] ret = new char[len];

            if ((this.bufpos + 1) >= len)
            {
                Array.Copy(this.buffer, this.bufpos - len + 1, ret, 0, len);
            }
            else
            {
                Array.Copy(this.buffer, this.bufsize - (len - this.bufpos - 1), ret, 0, len - this.bufpos - 1);
                Array.Copy(this.buffer, 0, ret, len - this.bufpos - 1, this.bufpos + 1);
            }

            return ret;
        }

        /// <seealso cref="org.apache.velocity.runtime.parser.CharStream.Done()">
        /// </seealso>
        public void Done()
        {
            this.buffer = null;
            this.bufline = null;
            this.bufcolumn = null;
        }

        /// <summary> Method to adjust line and column numbers for the start of a token.<BR></summary>
        /// <param name="newLine">
        /// </param>
        /// <param name="newCol">
        /// </param>
        public void AdjustBeginLineColumn(int newLine, int newCol)
        {
            int start = this.tokenBegin;
            int len;

            if (this.bufpos >= this.tokenBegin)
            {
                len = this.bufpos - this.tokenBegin + this.inBuf + 1;
            }
            else
            {
                len = this.bufsize - this.tokenBegin + this.bufpos + 1 + this.inBuf;
            }

            int i = 0, j = 0, k = 0;
            int nextColDiff = 0, columnDiff = 0;

            while (i < len && this.bufline[j = start % this.bufsize] == this.bufline[k = ++start % this.bufsize])
            {
                this.bufline[j] = newLine;
                nextColDiff = columnDiff + this.bufcolumn[k] - this.bufcolumn[j];
                this.bufcolumn[j] = newCol + columnDiff;
                columnDiff = nextColDiff;
                i++;
            }

            if (i < len)
            {
                this.bufline[j] = newLine++;
                this.bufcolumn[j] = newCol + columnDiff;

                while (i++ < len)
                {
                    if (this.bufline[j = start % this.bufsize] != this.bufline[++start % this.bufsize])
                        this.bufline[j] = newLine++;
                    else
                        this.bufline[j] = newLine;
                }
            }

            this.line = this.bufline[j];
            this.column = this.bufcolumn[j];
        }
    }
}