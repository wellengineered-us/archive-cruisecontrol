/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.    
*/

/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java */

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

using WellEngineered.CruiseControl.PrivateBuild.NVelocity.Exception;
using WellEngineered.CruiseControl.PrivateBuild.NVelocity.Runtime.Directive;
using WellEngineered.CruiseControl.PrivateBuild.NVelocity.Runtime.Parser.Node;

namespace WellEngineered.CruiseControl.PrivateBuild.NVelocity.Runtime.Parser
{
	/// <summary> This class is responsible for parsing a Velocity
    /// template. This class was generated by JavaCC using
    /// the JJTree extension to produce an Abstract
    /// Syntax Tree (AST) of the template.
    /// 
    /// Please look at the Parser.jjt file which is
    /// what controls the generation of this class.
    /// 
    /// </summary>
    /// <author>  <a href="mailto:jvanzyl@apache.org">Jason van Zyl</a>
    /// </author>
    /// <author>  <a href="mailto:geirm@optonline.net">Geir Magnusson Jr.</a>
    /// </author>
    /// <author>  <a href="hps@intermeta.de">Henning P. Schmiedehausen</a>
    /// </author>
    /// <version>  $Id: Parser.java 736127 2009-01-20 21:59:00Z byron $
    /// </version>
    public class Parser
    {
        private void InitBlock()
        {
            this.jj_2_rtns = new JJCalls[12];
            this.jj_ls = new LookaheadSuccess();
        }
        /// <summary>  This method sets the directives Hashtable</summary>
        public IDictionary<string, Directive.Directive> Directives
        {
            set
            {
                this.directives = value;
            }

        }
        /// <summary> Check whether there is a left parenthesis with leading optional
        /// whitespaces. This method is used in the semantic look ahead of
        /// Directive method. This is done in code instead of as a production
        /// for simplicity and efficiency.
        /// </summary>
        private bool LeftParenthesis
        {
            get
            {
                char c;
                int no = 0;
                try
                {
                    while (true)
                    {
                        /**
                        * Read a character
                        */
                        c = this.velcharstream.ReadChar();
                        no++;
                        if (c == '(')
                        {
                            return true;
                        }
                        /**
                        * if not a white space return
                        */
                        else if (c != ' ' && c != '\n' && c != '\r' && c != '\t')
                        {
                            return false;
                        }
                    }
                }
                catch (IOException e)
                {
                }
                finally
                {
                    /**
                    * Backup the stream to the initial state
                    */
                    this.velcharstream.Backup(no);
                }
                return false;
            }

        }
        public virtual Token NextToken
        {
            get
            {
                if (this.token.Next != null)
                    this.token = this.token.Next;
                else
                    this.token = this.token.Next = this.token_source.NextToken;
                this.jj_ntk_Renamed_Field = -1;
                this.jj_gen++;
                return this.token;
            }

        }
        /*@bgen(jjtree)*/
        protected internal ParserState jjtree = new ParserState();
        /// <summary>  This Hashtable contains a list of all of the dynamic directives.</summary>
        private IDictionary<string, Directive.Directive> directives = new Dictionary<string, Directive.Directive>();

        /// <summary>  Name of current template we are parsing.  Passed to us in parse()</summary>
        public string currentTemplateName = "";

        internal VelocityCharStream velcharstream = null;

        private IRuntimeServices rsvc = null;

        /// <summary> This constructor was added to allow the re-use of parsers.
        /// The normal constructor takes a single argument which
        /// an InputStream. This simply creates a re-usable parser
        /// object, we satisfy the requirement of an InputStream
        /// by using a newline character as an input stream.
        /// </summary>
        public Parser(IRuntimeServices rs)
            : this(new VelocityCharStream(new StringReader("\n"), 1, 1))
        {

            /*
            * now setup a VCS for later use
            */
            this.velcharstream = new VelocityCharStream(new StringReader("\n"), 1, 1);

            /*
            *  and save the RuntimeServices
            */
            this.rsvc = rs;
        }

        /// <summary> This was also added to allow parsers to be
        /// re-usable. Normal JavaCC use entails passing an
        /// input stream to the constructor and the parsing
        /// process is carried out once. We want to be able
        /// to re-use parsers: we do this by adding this
        /// method and re-initializing the lexer with
        /// the new stream that we want parsed.
        /// </summary>
        public virtual SimpleNode Parse(TextReader reader, string templateName)
        {
            SimpleNode sn = null;

            this.currentTemplateName = templateName;

            try
            {
                this.token_source.clearStateVars();

                /*
                *  reinitialize the VelocityCharStream
                *  with the new reader
                */
                this.velcharstream.ReInit(reader, 1, 1);

                /*
                * now reinit the Parser with this CharStream
                */
                this.ReInit(this.velcharstream);

                /*
                *  do that voodoo...
                */
                sn = this.Process();
            }
            catch (MacroParseException mee)
            {
                /*
                *  thrown by the Macro class when something is amiss in the
                *  Macro specification
                */
                this.rsvc.Log.Error("Parser Error: " + templateName, mee);
                throw mee;
            }
            catch (ParseException pe)
            {
                this.rsvc.Log.Error("Parser Exception: " + templateName, pe);
                throw new TemplateParseException(pe.currentToken, pe.expectedTokenSequences, pe.tokenImage, this.currentTemplateName);
            }
            catch (TokenMgrError tme)
            {
                throw new ParseException("Lexical error: " + tme.ToString());
            }
            catch (System.Exception e)
            {
                System.String msg = "Parser Error: " + templateName;
                this.rsvc.Log.Error(msg, e);
                throw new VelocityException(msg, e);
            }

            this.currentTemplateName = "";

            return sn;
        }

        /// <summary>  This method gets a Directive from the directives Hashtable</summary>
        public virtual Directive.Directive GetDirective(string directive)
        {
            return (Directive.Directive)this.directives[directive];
        }

        /// <summary>  This method finds out of the directive exists in the directives
        /// Hashtable.
        /// </summary>
        public virtual bool IsDirective(string directive)
        {
            return this.directives.ContainsKey(directive);
        }


        /// <summary> Produces a processed output for an escaped control or
        /// pluggable directive
        /// </summary>
        private System.String escapedDirective(System.String strImage)
        {
            int iLast = strImage.LastIndexOf("\\");

            string strDirective = strImage.Substring(iLast + 1);

            bool bRecognizedDirective = false;

            // we don't have to call substring method all the time in this method
            string dirTag = strDirective.Substring(1);
            if (dirTag[0] == '{')
            {
                dirTag = dirTag.Substring(1, (dirTag.Length - 1) - (1));
            }

            /*
            *  is this a PD or a control directive?
            */

            if (this.IsDirective(dirTag))
            {
                bRecognizedDirective = true;
            }
            else if (this.rsvc.IsVelocimacro(dirTag, this.currentTemplateName))
            {
                bRecognizedDirective = true;
            }
            else
            {
                /* order for speed? */

                if (dirTag.Equals("if") || dirTag.Equals("end") || dirTag.Equals("set") || dirTag.Equals("else") || dirTag.Equals("elseif") || dirTag.Equals("stop"))
                {
                    bRecognizedDirective = true;
                }
            }

            /*
            *  if so, make the proper prefix string (let the escapes do their thing..)
            *  otherwise, just return what it is..
            */

            if (bRecognizedDirective)
                return (strImage.Substring(0, (iLast / 2) - (0)) + strDirective);
            else
                return (strImage);
        }

        /// <summary> This method is what starts the whole parsing
        /// process. After the parsing is complete and
        /// the template has been turned into an AST,
        /// this method returns the root of AST which
        /// can subsequently be traversed by a visitor
        /// which implements the ParserVisitor interface
        /// which is generated automatically by JavaCC
        /// </summary>
        public SimpleNode Process()
        {
            /*@bgen(jjtree) process */
            ASTprocess jjtn000 = new ASTprocess(this, ParserTreeConstants.JJTPROCESS);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                while (true)
                {
                    switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                    {

                        case ParserConstants.LPAREN:
                        case ParserConstants.RPAREN:
                        case ParserConstants.ESCAPE_DIRECTIVE:
                        case ParserConstants.SET_DIRECTIVE:
                        case ParserConstants.SINGLE_LINE_COMMENT_START:
                        case ParserConstants.DOUBLE_ESCAPE:
                        case ParserConstants.ESCAPE:
                        case ParserConstants.TEXT:
                        case ParserConstants.FORMAL_COMMENT:
                        case ParserConstants.MULTI_LINE_COMMENT:
                        case ParserConstants.STRING_LITERAL:
                        case ParserConstants.IF_DIRECTIVE:
                        case ParserConstants.STOP_DIRECTIVE:
                        case ParserConstants.INTEGER_LITERAL:
                        case ParserConstants.FLOATING_POINT_LITERAL:
                        case ParserConstants.WORD:
                        case ParserConstants.BRACKETED_WORD:
                        case ParserConstants.IDENTIFIER:
                        case ParserConstants.DOT:
                        case ParserConstants.LCURLY:
                        case ParserConstants.RCURLY:
                            ;
                            break;

                        default:
                            this.jj_la1[0] = this.jj_gen;
                            goto label_1_brk;

                    }
                    this.Statement();
                }

            label_1_brk: ;

                this.jj_consume_token(0);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                {
                    if (true)
                        return jjtn000;
                }
            }
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
            throw new System.ApplicationException("Missing return statement in function");
        }

        /// <summary> These are the types of statements that
        /// are acceptable in Velocity templates.
        /// </summary>
        public void Statement()
        {
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.IF_DIRECTIVE:
                    this.IfStatement();
                    break;

                case ParserConstants.STOP_DIRECTIVE:
                    this.StopStatement();
                    break;

                default:
                    this.jj_la1[1] = this.jj_gen;
                    if (this.jj_2_1(2))
                    {
                        this.Reference();
                    }
                    else
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.SINGLE_LINE_COMMENT_START:
                            case ParserConstants.FORMAL_COMMENT:
                            case ParserConstants.MULTI_LINE_COMMENT:
                                this.Comment();
                                break;

                            case ParserConstants.SET_DIRECTIVE:
                                this.SetDirective();
                                break;

                            case ParserConstants.ESCAPE_DIRECTIVE:
                                this.EscapedDirective();
                                break;

                            case ParserConstants.DOUBLE_ESCAPE:
                                this.Escape();
                                break;

                            case ParserConstants.WORD:
                            case ParserConstants.BRACKETED_WORD:
                                this.Directive();
                                break;

                            case ParserConstants.LPAREN:
                            case ParserConstants.RPAREN:
                            case ParserConstants.ESCAPE:
                            case ParserConstants.TEXT:
                            case ParserConstants.STRING_LITERAL:
                            case ParserConstants.INTEGER_LITERAL:
                            case ParserConstants.FLOATING_POINT_LITERAL:
                            case ParserConstants.DOT:
                            case ParserConstants.LCURLY:
                            case ParserConstants.RCURLY:
                                this.Text();
                                break;

                            default:
                                this.jj_la1[2] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();

                        }
                    }
                    break;

            }
        }

        /// <summary>  used to separate the notion of a valid directive that has been
        /// escaped, versus something that looks like a directive and
        /// is just schmoo.  This is important to do as a separate production
        /// that creates a node, because we want this, in either case, to stop
        /// the further parsing of the Directive() tree.
        /// </summary>
        public void EscapedDirective()
        {
            /*@bgen(jjtree) EscapedDirective */
            ASTEscapedDirective jjtn000 = new ASTEscapedDirective(this, ParserTreeConstants.JJTESCAPEDDIRECTIVE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                Token t = null;
                t = this.jj_consume_token(ParserConstants.ESCAPE_DIRECTIVE);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                /*
                *  churn and burn..
                */
                t.Image = this.escapedDirective(t.Image);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary>  Used to catch and process escape sequences in grammatical constructs
        /// as escapes outside of VTL are just characters.  Right now we have both
        /// this and the EscapeDirective() construction because in the EscapeDirective()
        /// case, we want to suck in the #<directive> and here we don't.  We just want
        /// the escapes to render correctly
        /// </summary>
        public void Escape()
        {
            /*@bgen(jjtree) Escape */
            ASTEscape jjtn000 = new ASTEscape(this, ParserTreeConstants.JJTESCAPE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                Token t = null;
                int count = 0;
                bool control = false;
                while (true)
                {
                    t = this.jj_consume_token(ParserConstants.DOUBLE_ESCAPE);
                    count++;
                    if (this.jj_2_2(2))
                    {
                        ;
                    }
                    else
                    {
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_2_brk;
                    }
                }
            //UPGRADE_NOTE: ��ǩ��label_2_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_2_brk: ;

                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                /*
                * first, check to see if we have a control directive
                */
                switch (t.Next.Kind)
                {

                    case ParserConstants.IF_DIRECTIVE:
                    case ParserConstants.ELSE_DIRECTIVE:
                    case ParserConstants.ELSEIF_DIRECTIVE:
                    case ParserConstants.END:
                    case ParserConstants.STOP_DIRECTIVE:
                        control = true;
                        break;
                }

                /*
                * if that failed, lets lookahead to see if we matched a PD or a VM
                */
                System.String nTag = t.Next.Image.Substring(1);

                if (this.IsDirective(nTag))
                    control = true;
                else if (this.rsvc.IsVelocimacro(nTag, this.currentTemplateName))
                    control = true;

                jjtn000.val = "";

                for (int i = 0; i < count; i++)
                    jjtn000.val += (control ? "\\" : "\\\\");
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void Comment()
        {
            /*@bgen(jjtree) Comment */
            ASTComment jjtn000 = new ASTComment(this, ParserTreeConstants.JJTCOMMENT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.SINGLE_LINE_COMMENT_START:
                        this.jj_consume_token(ParserConstants.SINGLE_LINE_COMMENT_START);
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.SINGLE_LINE_COMMENT:
                                this.jj_consume_token(ParserConstants.SINGLE_LINE_COMMENT);
                                break;

                            default:
                                this.jj_la1[3] = this.jj_gen;
                                ;
                                break;

                        }
                        break;

                    case ParserConstants.MULTI_LINE_COMMENT:
                        this.jj_consume_token(ParserConstants.MULTI_LINE_COMMENT);
                        break;

                    case ParserConstants.FORMAL_COMMENT:
                        this.jj_consume_token(ParserConstants.FORMAL_COMMENT);
                        break;

                    default:
                        this.jj_la1[4] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void FloatingPointLiteral()
        {
            /*@bgen(jjtree) FloatingPointLiteral */
            ASTFloatingPointLiteral jjtn000 = new ASTFloatingPointLiteral(this, ParserTreeConstants.JJTFLOATINGPOINTLITERAL);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.FLOATING_POINT_LITERAL);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void IntegerLiteral()
        {
            /*@bgen(jjtree) IntegerLiteral */
            ASTIntegerLiteral jjtn000 = new ASTIntegerLiteral(this, ParserTreeConstants.JJTINTEGERLITERAL);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.INTEGER_LITERAL);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void StringLiteral()
        {
            /*@bgen(jjtree) StringLiteral */
            ASTStringLiteral jjtn000 = new ASTStringLiteral(this, ParserTreeConstants.JJTSTRINGLITERAL);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.STRING_LITERAL);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary> This method corresponds to variable
        /// references in Velocity templates.
        /// The following are examples of variable
        /// references that may be found in a
        /// template:
        /// 
        /// $foo
        /// $bar
        /// 
        /// </summary>
        public void Identifier()
        {
            /*@bgen(jjtree) Identifier */
            ASTIdentifier jjtn000 = new ASTIdentifier(this, ParserTreeConstants.JJTIDENTIFIER);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.IDENTIFIER);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void Word()
        {
            /*@bgen(jjtree) Word */
            ASTWord jjtn000 = new ASTWord(this, ParserTreeConstants.JJTWORD);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.WORD);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary>   Supports the arguments for the Pluggable Directives</summary>
        public int DirectiveArg()
        {
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.IDENTIFIER:
                case ParserConstants.LCURLY:
                    this.Reference();
                    {
                        if (true)
                            return ParserTreeConstants.JJTREFERENCE;
                    }
                    break;

                case ParserConstants.WORD:
                    this.Word();
                    {
                        if (true)
                            return ParserTreeConstants.JJTWORD;
                    }
                    break;

                case ParserConstants.STRING_LITERAL:
                    this.StringLiteral();
                    {
                        if (true)
                            return ParserTreeConstants.JJTSTRINGLITERAL;
                    }
                    break;

                case ParserConstants.INTEGER_LITERAL:
                    this.IntegerLiteral();
                    {
                        if (true)
                            return ParserTreeConstants.JJTINTEGERLITERAL;
                    }
                    break;

                default:
                    this.jj_la1[5] = this.jj_gen;
                    if (this.jj_2_3(2147483647))
                    {
                        this.IntegerRange();
                        {
                            if (true)
                                return ParserTreeConstants.JJTINTEGERRANGE;
                        }
                    }
                    else
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.FLOATING_POINT_LITERAL:
                                this.FloatingPointLiteral();
                                {
                                    if (true)
                                        return ParserTreeConstants.JJTFLOATINGPOINTLITERAL;
                                }
                                break;

                            case ParserConstants.LEFT_CURLEY:
                                this.Map();
                                {
                                    if (true)
                                        return ParserTreeConstants.JJTMAP;
                                }
                                break;

                            case ParserConstants.LBRACKET:
                                this.ObjectArray();
                                {
                                    if (true)
                                        return ParserTreeConstants.JJTOBJECTARRAY;
                                }
                                break;

                            case ParserConstants.TRUE:
                                this.True();
                                {
                                    if (true)
                                        return ParserTreeConstants.JJTTRUE;
                                }
                                break;

                            case ParserConstants.FALSE:
                                this.False();
                                {
                                    if (true)
                                        return ParserTreeConstants.JJTFALSE;
                                }
                                break;

                            default:
                                this.jj_la1[6] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();

                        }
                    }
                    break;

            }
            throw new System.ApplicationException("Missing return statement in function");
        }

        /// <summary>   Supports the Pluggable Directives
        /// #foo( arg+ )
        /// </summary>
        public SimpleNode Directive()
        {
            /*@bgen(jjtree) Directive */
            ASTDirective jjtn000 = new ASTDirective(this, ParserTreeConstants.JJTDIRECTIVE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000); Token t = null;
            int argType;
            int argPos = 0;
            Directive.Directive d;
            int directiveType;
            bool isVM = false;
            bool doItNow = false;
            try
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WORD:
                        t = this.jj_consume_token(ParserConstants.WORD);
                        break;

                    case ParserConstants.BRACKETED_WORD:
                        t = this.jj_consume_token(ParserConstants.BRACKETED_WORD);
                        break;

                    default:
                        this.jj_la1[7] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
                System.String directiveName;
                if (t.Kind == ParserConstants.BRACKETED_WORD)
                {
                    directiveName = t.Image.Substring(2, (t.Image.Length - 1) - (2));
                }
                else
                {
                    directiveName = t.Image.Substring(1);
                }

                d = (Directive.Directive)this.directives[directiveName];

                /*
                *  Velocimacro support : if the directive is macro directive
                *   then set the flag so after the block parsing, we add the VM
                *   right then. (So available if used w/in the current template )
                */

                if (directiveName.Equals("macro"))
                {
                    doItNow = true;
                }

                /*
                * set the directive name from here.  No reason for the thing to know
                * about parser tokens
                */

                jjtn000.DirectiveName = directiveName;

                if (d == null)
                {
                    /*
                    *  if null, then not a real directive, but maybe a Velocimacro
                    */

                    isVM = this.rsvc.IsVelocimacro(directiveName, this.currentTemplateName);

                    /*
                    *  Currently, all VMs are LINE directives
                    */

                    directiveType = DirectiveType.LINE;
                }
                else
                {
                    directiveType = d.Type;
                }

                /*
                *  now, switch us out of PRE_DIRECTIVE
                */

                this.token_source.SwitchTo(ParserConstants.DIRECTIVE);

                argPos = 0;
                if (this.LeftParenthesis)
                {
                    switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                    {

                        case ParserConstants.WHITESPACE:
                            this.jj_consume_token(ParserConstants.WHITESPACE);
                            break;

                        default:
                            this.jj_la1[8] = this.jj_gen;
                            ;
                            break;

                    }
                    this.jj_consume_token(ParserConstants.LPAREN);
                    while (true)
                    {
                        if (this.jj_2_4(2))
                        {
                            ;
                        }
                        else
                        {
                            //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                            goto label_3_brk;
                        }
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.WHITESPACE:
                                this.jj_consume_token(ParserConstants.WHITESPACE);
                                break;

                            default:
                                this.jj_la1[9] = this.jj_gen;
                                ;
                                break;

                        }
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.COMMA:
                                this.jj_consume_token(ParserConstants.COMMA);
                                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                                {

                                    case ParserConstants.WHITESPACE:
                                        this.jj_consume_token(ParserConstants.WHITESPACE);
                                        break;

                                    default:
                                        this.jj_la1[10] = this.jj_gen;
                                        ;
                                        break;

                                }
                                break;

                            default:
                                this.jj_la1[11] = this.jj_gen;
                                ;
                                break;

                        }
                        argType = this.DirectiveArg();
                        if (argType == ParserTreeConstants.JJTWORD)
                        {
                            if (doItNow && argPos == 0)
                            {
                                /* if #macro and it's the 0th arg, ok */
                            }
                            else if (isVM)
                            {
                                {
                                    if (true)
                                        throw new MacroParseException("Invalid arg #" + argPos + " in VM " + t.Image, this.currentTemplateName, t);
                                }
                            }
                            /* if #foreach and it's the 2nd arg, ok */
                            else if (d != null && (!directiveName.Equals("foreach") || argPos != 1))
                            {
                                {
                                    //if (true)
                                    //    throw new MacroParseException("Invalid arg #" + argPos + " in directive " + t.Image, currentTemplateName, t);
                                }
                            }
                            else
                            {
                                /* either schmoo or a late-defined macro,
                                * VelocimacroProxy will have to check for latter. */
                            }
                        }
                        else
                        {
                            if (doItNow && argPos == 0)
                            {
                                /* if a VM and it's the 0th arg, not ok */

                                {
                                    if (true)
                                        throw new MacroParseException("Invalid first arg" + " in #macro() directive - must be a" + " word token (no \' or \" surrounding)", this.currentTemplateName, t);
                                }
                            }
                        }

                        argPos++;
                    }
                //UPGRADE_NOTE: ��ǩ��label_3_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_3_brk: ;

                    switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                    {

                        case ParserConstants.WHITESPACE:
                            this.jj_consume_token(ParserConstants.WHITESPACE);
                            break;

                        default:
                            this.jj_la1[12] = this.jj_gen;
                            ;
                            break;

                    }
                    this.jj_consume_token(ParserConstants.RPAREN);
                    if (directiveType == DirectiveType.LINE)
                    {
                        {
                            if (true)
                                return jjtn000;
                        }
                    }
                }
                else
                {
                    if (doItNow)
                    // doItNow is true if the directive is "macro"
                    {
                        // VELOCITY-667 We get here if we have a "#macro" construct
                        // without parenthesis which is a parse error
                        {
                            if (true)
                                throw new MacroParseException("A macro declaration requires at least a name argument", this.currentTemplateName, t);
                        }
                    }

                    /**
                    * Not a directive
                    */
                    this.token_source.stateStackPop();
                    this.token_source.inDirective = false;
                    {
                        if (true)
                            return jjtn000;
                    }
                }
                ASTBlock jjtn001 = new ASTBlock(this, ParserTreeConstants.JJTBLOCK);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    while (true)
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.LPAREN:
                            case ParserConstants.RPAREN:
                            case ParserConstants.ESCAPE_DIRECTIVE:
                            case ParserConstants.SET_DIRECTIVE:
                            case ParserConstants.SINGLE_LINE_COMMENT_START:
                            case ParserConstants.DOUBLE_ESCAPE:
                            case ParserConstants.ESCAPE:
                            case ParserConstants.TEXT:
                            case ParserConstants.FORMAL_COMMENT:
                            case ParserConstants.MULTI_LINE_COMMENT:
                            case ParserConstants.STRING_LITERAL:
                            case ParserConstants.IF_DIRECTIVE:
                            case ParserConstants.STOP_DIRECTIVE:
                            case ParserConstants.INTEGER_LITERAL:
                            case ParserConstants.FLOATING_POINT_LITERAL:
                            case ParserConstants.WORD:
                            case ParserConstants.BRACKETED_WORD:
                            case ParserConstants.IDENTIFIER:
                            case ParserConstants.DOT:
                            case ParserConstants.LCURLY:
                            case ParserConstants.RCURLY:
                                ;
                                break;

                            default:
                                this.jj_la1[13] = this.jj_gen;
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_4_brk;

                        }
                        this.Statement();
                    }
                //UPGRADE_NOTE: ��ǩ��label_4_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_4_brk: ;

                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.closeNodeScope(jjtn001, true);
                    }
                }
                this.jj_consume_token(ParserConstants.END);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                /*
                *  VM : if we are processing a #macro directive, we need to
                *     process the block.  In truth, I can just register the name
                *     and do the work later when init-ing.  That would work
                *     as long as things were always defined before use.  This way
                *     we don't have to worry about forward references and such...
                */

                if (doItNow)
                {
                    Macro.ProcessAndRegister(this.rsvc, t, jjtn000, this.currentTemplateName);
                }

                /*
                *  VM : end
                */

                {
                    if (true)
                        return jjtn000;
                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
            throw new System.ApplicationException("Missing return statement in function");
        }

        /// <summary> for creating a map in a #set
        /// 
        /// #set($foo = {$foo : $bar, $blargh : $thingy})
        /// </summary>
        public void Map()
        {
            /*@bgen(jjtree) Map */
            ASTMap jjtn000 = new ASTMap(this, ParserTreeConstants.JJTMAP);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.LEFT_CURLEY);
                if (this.jj_2_5(2))
                {
                    this.Parameter();
                    this.jj_consume_token(ParserConstants.COLON);
                    this.Parameter();
                    while (true)
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.COMMA:
                                ;
                                break;

                            default:
                                this.jj_la1[14] = this.jj_gen;
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_5_brk;

                        }
                        this.jj_consume_token(ParserConstants.COMMA);
                        this.Parameter();
                        this.jj_consume_token(ParserConstants.COLON);
                        this.Parameter();
                    }
                //UPGRADE_NOTE: ��ǩ��label_5_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_5_brk: ;

                }
                else
                {
                    switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                    {

                        case ParserConstants.WHITESPACE:
                            this.jj_consume_token(ParserConstants.WHITESPACE);
                            break;

                        default:
                            this.jj_la1[15] = this.jj_gen;
                            ;
                            break;

                    }
                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.RIGHT_CURLEY:
                        this.jj_consume_token(ParserConstants.RIGHT_CURLEY);
                        break;

                    case ParserConstants.RCURLY:
                        this.jj_consume_token(ParserConstants.RCURLY);
                        break;

                    default:
                        this.jj_la1[16] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void ObjectArray()
        {
            /*@bgen(jjtree) ObjectArray */
            ASTObjectArray jjtn000 = new ASTObjectArray(this, ParserTreeConstants.JJTOBJECTARRAY);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.LBRACKET);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LBRACKET:
                    case ParserConstants.LEFT_CURLEY:
                    case ParserConstants.WHITESPACE:
                    case ParserConstants.STRING_LITERAL:
                    case ParserConstants.TRUE:
                    case ParserConstants.FALSE:
                    case ParserConstants.INTEGER_LITERAL:
                    case ParserConstants.FLOATING_POINT_LITERAL:
                    case ParserConstants.IDENTIFIER:
                    case ParserConstants.LCURLY:
                        this.Parameter();
                        while (true)
                        {
                            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                            {

                                case ParserConstants.COMMA:
                                    ;
                                    break;

                                default:
                                    this.jj_la1[17] = this.jj_gen;
                                    //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                    goto label_6_brk;

                            }
                            this.jj_consume_token(ParserConstants.COMMA);
                            this.Parameter();
                        }
                    //UPGRADE_NOTE: ��ǩ��label_6_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_6_brk: ;

break;

                    default:
this.jj_la1[18] = this.jj_gen;
;
break;

                }
                this.jj_consume_token(ParserConstants.RBRACKET);
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary>  supports the [n..m] vector generator for use in
        /// the #foreach() to generate measured ranges w/o
        /// needing explicit support from the app/servlet
        /// </summary>
        public void IntegerRange()
        {
            /*@bgen(jjtree) IntegerRange */
            ASTIntegerRange jjtn000 = new ASTIntegerRange(this, ParserTreeConstants.JJTINTEGERRANGE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.LBRACKET);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[19] = this.jj_gen;
                        ;
                        break;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.IDENTIFIER:
                    case ParserConstants.LCURLY:
                        this.Reference();
                        break;

                    case ParserConstants.INTEGER_LITERAL:
                        this.IntegerLiteral();
                        break;

                    default:
                        this.jj_la1[20] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[21] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.DOUBLEDOT);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[22] = this.jj_gen;
                        ;
                        break;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.IDENTIFIER:
                    case ParserConstants.LCURLY:
                        this.Reference();
                        break;

                    case ParserConstants.INTEGER_LITERAL:
                        this.IntegerLiteral();
                        break;

                    default:
                        this.jj_la1[23] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[24] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.RBRACKET);
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary> This method has yet to be fully implemented
        /// but will allow arbitrarily nested method
        /// calls
        /// </summary>
        public void Parameter()
        {
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.WHITESPACE:
                    this.jj_consume_token(ParserConstants.WHITESPACE);
                    break;

                default:
                    this.jj_la1[25] = this.jj_gen;
                    ;
                    break;

            }
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.STRING_LITERAL:
                    this.StringLiteral();
                    break;

                case ParserConstants.INTEGER_LITERAL:
                    this.IntegerLiteral();
                    break;

                default:
                    this.jj_la1[26] = this.jj_gen;
                    if (this.jj_2_6(2147483647))
                    {
                        this.IntegerRange();
                    }
                    else
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.LEFT_CURLEY:
                                this.Map();
                                break;

                            case ParserConstants.LBRACKET:
                                this.ObjectArray();
                                break;

                            case ParserConstants.TRUE:
                                this.True();
                                break;

                            case ParserConstants.FALSE:
                                this.False();
                                break;

                            case ParserConstants.IDENTIFIER:
                            case ParserConstants.LCURLY:
                                this.Reference();
                                break;

                            case ParserConstants.FLOATING_POINT_LITERAL:
                                this.FloatingPointLiteral();
                                break;

                            default:
                                this.jj_la1[27] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();

                        }
                    }
                    break;

            }
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.WHITESPACE:
                    this.jj_consume_token(ParserConstants.WHITESPACE);
                    break;

                default:
                    this.jj_la1[28] = this.jj_gen;
                    ;
                    break;

            }
        }

        /// <summary> This method has yet to be fully implemented
        /// but will allow arbitrarily nested method
        /// calls
        /// </summary>
        public void Method()
        {
            /*@bgen(jjtree) Method */
            ASTMethod jjtn000 = new ASTMethod(this, ParserTreeConstants.JJTMETHOD);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.Identifier();
                this.jj_consume_token(ParserConstants.LPAREN);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LBRACKET:
                    case ParserConstants.LEFT_CURLEY:
                    case ParserConstants.WHITESPACE:
                    case ParserConstants.STRING_LITERAL:
                    case ParserConstants.TRUE:
                    case ParserConstants.FALSE:
                    case ParserConstants.INTEGER_LITERAL:
                    case ParserConstants.FLOATING_POINT_LITERAL:
                    case ParserConstants.IDENTIFIER:
                    case ParserConstants.LCURLY:
                        this.Parameter();
                        while (true)
                        {
                            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                            {

                                case ParserConstants.COMMA:
                                    ;
                                    break;

                                default:
                                    this.jj_la1[29] = this.jj_gen;
                                    //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                    goto label_7_brk;

                            }
                            this.jj_consume_token(ParserConstants.COMMA);
                            this.Parameter();
                        }
                    //UPGRADE_NOTE: ��ǩ��label_7_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_7_brk: ;

break;

                    default:
this.jj_la1[30] = this.jj_gen;
;
break;

                }
                this.jj_consume_token(ParserConstants.REFMOD2_RPAREN);
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void Reference()
        {
            /*@bgen(jjtree) Reference */
            ASTReference jjtn000 = new ASTReference(this, ParserTreeConstants.JJTREFERENCE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.IDENTIFIER:
                        this.jj_consume_token(ParserConstants.IDENTIFIER);
                        while (true)
                        {
                            if (this.jj_2_7(2))
                            {
                                ;
                            }
                            else
                            {
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_8_brk;
                            }
                            this.jj_consume_token(ParserConstants.DOT);
                            if (this.jj_2_8(3))
                            {
                                this.Method();
                            }
                            else
                            {
                                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                                {

                                    case ParserConstants.IDENTIFIER:
                                        this.Identifier();
                                        break;

                                    default:
                                        this.jj_la1[31] = this.jj_gen;
                                        this.jj_consume_token(-1);
                                        throw new ParseException();

                                }
                            }
                        }
                    //UPGRADE_NOTE: ��ǩ��label_8_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_8_brk: ;

break;

                    case ParserConstants.LCURLY:
this.jj_consume_token(ParserConstants.LCURLY);
this.jj_consume_token(ParserConstants.IDENTIFIER);
while (true)
{
    if (this.jj_2_9(2))
    {
        ;
    }
    else
    {
        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
        goto label_9_brk;
    }
    this.jj_consume_token(ParserConstants.DOT);
    if (this.jj_2_10(3))
    {
        this.Method();
    }
    else
    {
        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
        {

            case ParserConstants.IDENTIFIER:
                this.Identifier();
                break;

            default:
                this.jj_la1[32] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();

        }
    }
}
//UPGRADE_NOTE: ��ǩ��label_9_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_9_brk: ;

this.jj_consume_token(ParserConstants.RCURLY);
break;

                    default:
this.jj_la1[33] = this.jj_gen;
this.jj_consume_token(-1);
throw new ParseException();

                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void True()
        {
            /*@bgen(jjtree) True */
            ASTTrue jjtn000 = new ASTTrue(this, ParserTreeConstants.JJTTRUE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.TRUE);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void False()
        {
            /*@bgen(jjtree) False */
            ASTFalse jjtn000 = new ASTFalse(this, ParserTreeConstants.JJTFALSE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.FALSE);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary> This method is responsible for allowing
        /// all non-grammar text to pass through
        /// unscathed.
        /// </summary>
        public void Text()
        {
            /*@bgen(jjtree) Text */
            ASTText jjtn000 = new ASTText(this, ParserTreeConstants.JJTTEXT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.TEXT:
                        this.jj_consume_token(ParserConstants.TEXT);
                        break;

                    case ParserConstants.DOT:
                        this.jj_consume_token(ParserConstants.DOT);
                        break;

                    case ParserConstants.RPAREN:
                        this.jj_consume_token(ParserConstants.RPAREN);
                        break;

                    case ParserConstants.LPAREN:
                        this.jj_consume_token(ParserConstants.LPAREN);
                        break;

                    case ParserConstants.INTEGER_LITERAL:
                        this.jj_consume_token(ParserConstants.INTEGER_LITERAL);
                        break;

                    case ParserConstants.FLOATING_POINT_LITERAL:
                        this.jj_consume_token(ParserConstants.FLOATING_POINT_LITERAL);
                        break;

                    case ParserConstants.STRING_LITERAL:
                        this.jj_consume_token(ParserConstants.STRING_LITERAL);
                        break;

                    case ParserConstants.ESCAPE:
                        this.jj_consume_token(ParserConstants.ESCAPE);
                        break;

                    case ParserConstants.LCURLY:
                        this.jj_consume_token(ParserConstants.LCURLY);
                        break;

                    case ParserConstants.RCURLY:
                        this.jj_consume_token(ParserConstants.RCURLY);
                        break;

                    default:
                        this.jj_la1[34] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /* -----------------------------------------------------------------------
        *
        *  Defined Directive Syntax
        *
        * ----------------------------------------------------------------------*/
        public void IfStatement()
        {
            /*@bgen(jjtree) IfStatement */
            ASTIfStatement jjtn000 = new ASTIfStatement(this, ParserTreeConstants.JJTIFSTATEMENT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.IF_DIRECTIVE);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[35] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.LPAREN);
                this.Expression();
                this.jj_consume_token(ParserConstants.RPAREN);
                ASTBlock jjtn001 = new ASTBlock(this, ParserTreeConstants.JJTBLOCK);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    while (true)
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.LPAREN:
                            case ParserConstants.RPAREN:
                            case ParserConstants.ESCAPE_DIRECTIVE:
                            case ParserConstants.SET_DIRECTIVE:
                            case ParserConstants.SINGLE_LINE_COMMENT_START:
                            case ParserConstants.DOUBLE_ESCAPE:
                            case ParserConstants.ESCAPE:
                            case ParserConstants.TEXT:
                            case ParserConstants.FORMAL_COMMENT:
                            case ParserConstants.MULTI_LINE_COMMENT:
                            case ParserConstants.STRING_LITERAL:
                            case ParserConstants.IF_DIRECTIVE:
                            case ParserConstants.STOP_DIRECTIVE:
                            case ParserConstants.INTEGER_LITERAL:
                            case ParserConstants.FLOATING_POINT_LITERAL:
                            case ParserConstants.WORD:
                            case ParserConstants.BRACKETED_WORD:
                            case ParserConstants.IDENTIFIER:
                            case ParserConstants.DOT:
                            case ParserConstants.LCURLY:
                            case ParserConstants.RCURLY:
                                ;
                                break;

                            default:
                                this.jj_la1[36] = this.jj_gen;
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_10_brk;

                        }
                        this.Statement();
                    }
                //UPGRADE_NOTE: ��ǩ��label_10_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_10_brk: ;

                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.closeNodeScope(jjtn001, true);
                    }
                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.ELSEIF_DIRECTIVE:
                        while (true)
                        {
                            this.ElseIfStatement();
                            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                            {

                                case ParserConstants.ELSEIF_DIRECTIVE:
                                    ;
                                    break;

                                default:
                                    this.jj_la1[37] = this.jj_gen;
                                    //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                    goto label_11_brk;

                            }
                        }
                    //UPGRADE_NOTE: ��ǩ��label_11_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_11_brk: ;

break;

                    default:
this.jj_la1[38] = this.jj_gen;
;
break;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.ELSE_DIRECTIVE:
                        this.ElseStatement();
                        break;

                    default:
                        this.jj_la1[39] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.END);
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void ElseStatement()
        {
            /*@bgen(jjtree) ElseStatement */
            ASTElseStatement jjtn000 = new ASTElseStatement(this, ParserTreeConstants.JJTELSESTATEMENT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.ELSE_DIRECTIVE);
                ASTBlock jjtn001 = new ASTBlock(this, ParserTreeConstants.JJTBLOCK);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    while (true)
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.LPAREN:
                            case ParserConstants.RPAREN:
                            case ParserConstants.ESCAPE_DIRECTIVE:
                            case ParserConstants.SET_DIRECTIVE:
                            case ParserConstants.SINGLE_LINE_COMMENT_START:
                            case ParserConstants.DOUBLE_ESCAPE:
                            case ParserConstants.ESCAPE:
                            case ParserConstants.TEXT:
                            case ParserConstants.FORMAL_COMMENT:
                            case ParserConstants.MULTI_LINE_COMMENT:
                            case ParserConstants.STRING_LITERAL:
                            case ParserConstants.IF_DIRECTIVE:
                            case ParserConstants.STOP_DIRECTIVE:
                            case ParserConstants.INTEGER_LITERAL:
                            case ParserConstants.FLOATING_POINT_LITERAL:
                            case ParserConstants.WORD:
                            case ParserConstants.BRACKETED_WORD:
                            case ParserConstants.IDENTIFIER:
                            case ParserConstants.DOT:
                            case ParserConstants.LCURLY:
                            case ParserConstants.RCURLY:
                                ;
                                break;

                            default:
                                this.jj_la1[40] = this.jj_gen;
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_12_brk;

                        }
                        this.Statement();
                    }
                //UPGRADE_NOTE: ��ǩ��label_12_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_12_brk: ;

                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.closeNodeScope(jjtn001, true);
                    }
                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void ElseIfStatement()
        {
            /*@bgen(jjtree) ElseIfStatement */
            ASTElseIfStatement jjtn000 = new ASTElseIfStatement(this, ParserTreeConstants.JJTELSEIFSTATEMENT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.ELSEIF_DIRECTIVE);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[41] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.LPAREN);
                this.Expression();
                this.jj_consume_token(ParserConstants.RPAREN);
                ASTBlock jjtn001 = new ASTBlock(this, ParserTreeConstants.JJTBLOCK);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    while (true)
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.LPAREN:
                            case ParserConstants.RPAREN:
                            case ParserConstants.ESCAPE_DIRECTIVE:
                            case ParserConstants.SET_DIRECTIVE:
                            case ParserConstants.SINGLE_LINE_COMMENT_START:
                            case ParserConstants.DOUBLE_ESCAPE:
                            case ParserConstants.ESCAPE:
                            case ParserConstants.TEXT:
                            case ParserConstants.FORMAL_COMMENT:
                            case ParserConstants.MULTI_LINE_COMMENT:
                            case ParserConstants.STRING_LITERAL:
                            case ParserConstants.IF_DIRECTIVE:
                            case ParserConstants.STOP_DIRECTIVE:
                            case ParserConstants.INTEGER_LITERAL:
                            case ParserConstants.FLOATING_POINT_LITERAL:
                            case ParserConstants.WORD:
                            case ParserConstants.BRACKETED_WORD:
                            case ParserConstants.IDENTIFIER:
                            case ParserConstants.DOT:
                            case ParserConstants.LCURLY:
                            case ParserConstants.RCURLY:
                                ;
                                break;

                            default:
                                this.jj_la1[42] = this.jj_gen;
                                //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                                goto label_13_brk;

                        }
                        this.Statement();
                    }
                //UPGRADE_NOTE: ��ǩ��label_13_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_13_brk: ;

                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.closeNodeScope(jjtn001, true);
                    }
                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary>  Currently support both types of set :
        /// #set( expr )
        /// #set expr
        /// </summary>
        public void SetDirective()
        {
            /*@bgen(jjtree) SetDirective */
            ASTSetDirective jjtn000 = new ASTSetDirective(this, ParserTreeConstants.JJTSETDIRECTIVE);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.SET_DIRECTIVE);
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[43] = this.jj_gen;
                        ;
                        break;

                }
                this.Reference();
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[44] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.EQUALS);
                this.Expression();
                this.jj_consume_token(ParserConstants.RPAREN);
                /*
                * ensure that inSet is false.  Leads to some amusing bugs...
                */

                this.token_source.inSet = false;
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.NEWLINE:
                        this.jj_consume_token(ParserConstants.NEWLINE);
                        break;

                    default:
                        this.jj_la1[45] = this.jj_gen;
                        ;
                        break;

                }
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        /// <summary> This method corresponds to the #stop
        /// directive which just simulates and EOF
        /// so that parsing stops. The #stop directive
        /// is useful for end-user debugging
        /// purposes.
        /// </summary>
        public void StopStatement()
        {
            /*@bgen(jjtree) #Stop( 0) */
            ASTStop jjtn000 = new ASTStop(this, ParserTreeConstants.JJTSTOP);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.jj_consume_token(ParserConstants.STOP_DIRECTIVE);
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.CloseNodeScope(jjtn000, 0);
                }
            }
        }

        /* -----------------------------------------------------------------------
        *
        *  Expression Syntax
        *
        * ----------------------------------------------------------------------*/
        public void Expression()
        {
            /*@bgen(jjtree) Expression */
            ASTExpression jjtn000 = new ASTExpression(this, ParserTreeConstants.JJTEXPRESSION);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.ConditionalOrExpression();
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.closeNodeScope(jjtn000, true);
                }
            }
        }

        public void Assignment()
        {
            /*@bgen(jjtree) #Assignment( 2) */
            ASTAssignment jjtn000 = new ASTAssignment(this, ParserTreeConstants.JJTASSIGNMENT);
            bool jjtc000 = true;
            this.jjtree.OpenNodeScope(jjtn000);
            try
            {
                this.PrimaryExpression();
                this.jj_consume_token(ParserConstants.EQUALS);
                this.Expression();
            }
            //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
            catch (System.Exception jjte000)
            {
                if (jjtc000)
                {
                    this.jjtree.ClearNodeScope(jjtn000);
                    jjtc000 = false;
                }
                else
                {
                    this.jjtree.PopNode();
                }
                if (jjte000 is System.SystemException)
                {
                    {
                        if (true)
                            throw (System.SystemException)jjte000;
                    }
                }
                if (jjte000 is ParseException)
                {
                    {
                        if (true)
                            throw (ParseException)jjte000;
                    }
                }
                {
                    if (true)
                        throw (System.ApplicationException)jjte000;
                }
            }
            finally
            {
                if (jjtc000)
                {
                    this.jjtree.CloseNodeScope(jjtn000, 2);
                }
            }
        }

        public void ConditionalOrExpression()
        {
            this.ConditionalAndExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_OR:
                        ;
                        break;

                    default:
                        this.jj_la1[46] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_14_brk;

                }
                this.jj_consume_token(ParserConstants.LOGICAL_OR);
                ASTOrNode jjtn001 = new ASTOrNode(this, ParserTreeConstants.JJTORNODE);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    this.ConditionalAndExpression();
                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.CloseNodeScope(jjtn001, 2);
                    }
                }
            }
        //UPGRADE_NOTE: ��ǩ��label_14_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_14_brk: ;

        }

        public void ConditionalAndExpression()
        {
            this.EqualityExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_AND:
                        ;
                        break;

                    default:
                        this.jj_la1[47] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_15_brk;

                }
                this.jj_consume_token(ParserConstants.LOGICAL_AND);
                ASTAndNode jjtn001 = new ASTAndNode(this, ParserTreeConstants.JJTANDNODE);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    this.EqualityExpression();
                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.CloseNodeScope(jjtn001, 2);
                    }
                }
            }
        //UPGRADE_NOTE: ��ǩ��label_15_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_15_brk: ;

        }

        public void EqualityExpression()
        {
            this.RelationalExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_EQUALS:
                    case ParserConstants.LOGICAL_NOT_EQUALS:
                        ;
                        break;

                    default:
                        this.jj_la1[48] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_16_brk;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_EQUALS:
                        this.jj_consume_token(ParserConstants.LOGICAL_EQUALS);
                        ASTEQNode jjtn001 = new ASTEQNode(this, ParserTreeConstants.JJTEQNODE);
                        bool jjtc001 = true;
                        this.jjtree.OpenNodeScope(jjtn001);
                        try
                        {
                            this.RelationalExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte001)
                        {
                            if (jjtc001)
                            {
                                this.jjtree.ClearNodeScope(jjtn001);
                                jjtc001 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte001 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte001;
                                }
                            }
                            if (jjte001 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte001;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte001;
                            }
                        }
                        finally
                        {
                            if (jjtc001)
                            {
                                this.jjtree.CloseNodeScope(jjtn001, 2);
                            }
                        }
                        break;

                    case ParserConstants.LOGICAL_NOT_EQUALS:
                        this.jj_consume_token(ParserConstants.LOGICAL_NOT_EQUALS);
                        ASTNENode jjtn002 = new ASTNENode(this, ParserTreeConstants.JJTNENODE);
                        bool jjtc002 = true;
                        this.jjtree.OpenNodeScope(jjtn002);
                        try
                        {
                            this.RelationalExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte002)
                        {
                            if (jjtc002)
                            {
                                this.jjtree.ClearNodeScope(jjtn002);
                                jjtc002 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte002 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte002;
                                }
                            }
                            if (jjte002 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte002;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte002;
                            }
                        }
                        finally
                        {
                            if (jjtc002)
                            {
                                this.jjtree.CloseNodeScope(jjtn002, 2);
                            }
                        }
                        break;

                    default:
                        this.jj_la1[49] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
        //UPGRADE_NOTE: ��ǩ��label_16_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_16_brk: ;

        }

        public void RelationalExpression()
        {
            this.AdditiveExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_LT:
                    case ParserConstants.LOGICAL_LE:
                    case ParserConstants.LOGICAL_GT:
                    case ParserConstants.LOGICAL_GE:
                        ;
                        break;

                    default:
                        this.jj_la1[50] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_17_brk;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LOGICAL_LT:
                        this.jj_consume_token(ParserConstants.LOGICAL_LT);
                        ASTLTNode jjtn001 = new ASTLTNode(this, ParserTreeConstants.JJTLTNODE);
                        bool jjtc001 = true;
                        this.jjtree.OpenNodeScope(jjtn001);
                        try
                        {
                            this.AdditiveExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte001)
                        {
                            if (jjtc001)
                            {
                                this.jjtree.ClearNodeScope(jjtn001);
                                jjtc001 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte001 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte001;
                                }
                            }
                            if (jjte001 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte001;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte001;
                            }
                        }
                        finally
                        {
                            if (jjtc001)
                            {
                                this.jjtree.CloseNodeScope(jjtn001, 2);
                            }
                        }
                        break;

                    case ParserConstants.LOGICAL_GT:
                        this.jj_consume_token(ParserConstants.LOGICAL_GT);
                        ASTGTNode jjtn002 = new ASTGTNode(this, ParserTreeConstants.JJTGTNODE);
                        bool jjtc002 = true;
                        this.jjtree.OpenNodeScope(jjtn002);
                        try
                        {
                            this.AdditiveExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte002)
                        {
                            if (jjtc002)
                            {
                                this.jjtree.ClearNodeScope(jjtn002);
                                jjtc002 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte002 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte002;
                                }
                            }
                            if (jjte002 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte002;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte002;
                            }
                        }
                        finally
                        {
                            if (jjtc002)
                            {
                                this.jjtree.CloseNodeScope(jjtn002, 2);
                            }
                        }
                        break;

                    case ParserConstants.LOGICAL_LE:
                        this.jj_consume_token(ParserConstants.LOGICAL_LE);
                        ASTLENode jjtn003 = new ASTLENode(this, ParserTreeConstants.JJTLENODE);
                        bool jjtc003 = true;
                        this.jjtree.OpenNodeScope(jjtn003);
                        try
                        {
                            this.AdditiveExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte003)
                        {
                            if (jjtc003)
                            {
                                this.jjtree.ClearNodeScope(jjtn003);
                                jjtc003 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte003 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte003;
                                }
                            }
                            if (jjte003 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte003;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte003;
                            }
                        }
                        finally
                        {
                            if (jjtc003)
                            {
                                this.jjtree.CloseNodeScope(jjtn003, 2);
                            }
                        }
                        break;

                    case ParserConstants.LOGICAL_GE:
                        this.jj_consume_token(ParserConstants.LOGICAL_GE);
                        ASTGENode jjtn004 = new ASTGENode(this, ParserTreeConstants.JJTGENODE);
                        bool jjtc004 = true;
                        this.jjtree.OpenNodeScope(jjtn004);
                        try
                        {
                            this.AdditiveExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte004)
                        {
                            if (jjtc004)
                            {
                                this.jjtree.ClearNodeScope(jjtn004);
                                jjtc004 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte004 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte004;
                                }
                            }
                            if (jjte004 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte004;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte004;
                            }
                        }
                        finally
                        {
                            if (jjtc004)
                            {
                                this.jjtree.CloseNodeScope(jjtn004, 2);
                            }
                        }
                        break;

                    default:
                        this.jj_la1[51] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
        //UPGRADE_NOTE: ��ǩ��label_17_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_17_brk: ;

        }

        public void AdditiveExpression()
        {
            this.MultiplicativeExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.MINUS:
                    case ParserConstants.PLUS:
                        ;
                        break;

                    default:
                        this.jj_la1[52] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_18_brk;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.PLUS:
                        this.jj_consume_token(ParserConstants.PLUS);
                        ASTAddNode jjtn001 = new ASTAddNode(this, ParserTreeConstants.JJTADDNODE);
                        bool jjtc001 = true;
                        this.jjtree.OpenNodeScope(jjtn001);
                        try
                        {
                            this.MultiplicativeExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte001)
                        {
                            if (jjtc001)
                            {
                                this.jjtree.ClearNodeScope(jjtn001);
                                jjtc001 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte001 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte001;
                                }
                            }
                            if (jjte001 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte001;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte001;
                            }
                        }
                        finally
                        {
                            if (jjtc001)
                            {
                                this.jjtree.CloseNodeScope(jjtn001, 2);
                            }
                        }
                        break;

                    case ParserConstants.MINUS:
                        this.jj_consume_token(ParserConstants.MINUS);
                        ASTSubtractNode jjtn002 = new ASTSubtractNode(this, ParserTreeConstants.JJTSUBTRACTNODE);
                        bool jjtc002 = true;
                        this.jjtree.OpenNodeScope(jjtn002);
                        try
                        {
                            this.MultiplicativeExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte002)
                        {
                            if (jjtc002)
                            {
                                this.jjtree.ClearNodeScope(jjtn002);
                                jjtc002 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte002 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte002;
                                }
                            }
                            if (jjte002 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte002;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte002;
                            }
                        }
                        finally
                        {
                            if (jjtc002)
                            {
                                this.jjtree.CloseNodeScope(jjtn002, 2);
                            }
                        }
                        break;

                    default:
                        this.jj_la1[53] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
        //UPGRADE_NOTE: ��ǩ��label_18_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_18_brk: ;

        }

        public void MultiplicativeExpression()
        {
            this.UnaryExpression();
            while (true)
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.MULTIPLY:
                    case ParserConstants.DIVIDE:
                    case ParserConstants.MODULUS:
                        ;
                        break;

                    default:
                        this.jj_la1[54] = this.jj_gen;
                        //UPGRADE_NOTE: ��ǵ� Break ����Ѹ���Ϊ Goto ��䡣 "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1012'"
                        goto label_19_brk;

                }
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.MULTIPLY:
                        this.jj_consume_token(ParserConstants.MULTIPLY);
                        ASTMulNode jjtn001 = new ASTMulNode(this, ParserTreeConstants.JJTMULNODE);
                        bool jjtc001 = true;
                        this.jjtree.OpenNodeScope(jjtn001);
                        try
                        {
                            this.UnaryExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte001)
                        {
                            if (jjtc001)
                            {
                                this.jjtree.ClearNodeScope(jjtn001);
                                jjtc001 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte001 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte001;
                                }
                            }
                            if (jjte001 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte001;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte001;
                            }
                        }
                        finally
                        {
                            if (jjtc001)
                            {
                                this.jjtree.CloseNodeScope(jjtn001, 2);
                            }
                        }
                        break;

                    case ParserConstants.DIVIDE:
                        this.jj_consume_token(ParserConstants.DIVIDE);
                        ASTDivNode jjtn002 = new ASTDivNode(this, ParserTreeConstants.JJTDIVNODE);
                        bool jjtc002 = true;
                        this.jjtree.OpenNodeScope(jjtn002);
                        try
                        {
                            this.UnaryExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte002)
                        {
                            if (jjtc002)
                            {
                                this.jjtree.ClearNodeScope(jjtn002);
                                jjtc002 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte002 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte002;
                                }
                            }
                            if (jjte002 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte002;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte002;
                            }
                        }
                        finally
                        {
                            if (jjtc002)
                            {
                                this.jjtree.CloseNodeScope(jjtn002, 2);
                            }
                        }
                        break;

                    case ParserConstants.MODULUS:
                        this.jj_consume_token(ParserConstants.MODULUS);
                        ASTModNode jjtn003 = new ASTModNode(this, ParserTreeConstants.JJTMODNODE);
                        bool jjtc003 = true;
                        this.jjtree.OpenNodeScope(jjtn003);
                        try
                        {
                            this.UnaryExpression();
                        }
                        //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                        catch (System.Exception jjte003)
                        {
                            if (jjtc003)
                            {
                                this.jjtree.ClearNodeScope(jjtn003);
                                jjtc003 = false;
                            }
                            else
                            {
                                this.jjtree.PopNode();
                            }
                            if (jjte003 is System.SystemException)
                            {
                                {
                                    if (true)
                                        throw (System.SystemException)jjte003;
                                }
                            }
                            if (jjte003 is ParseException)
                            {
                                {
                                    if (true)
                                        throw (ParseException)jjte003;
                                }
                            }
                            {
                                if (true)
                                    throw (System.ApplicationException)jjte003;
                            }
                        }
                        finally
                        {
                            if (jjtc003)
                            {
                                this.jjtree.CloseNodeScope(jjtn003, 2);
                            }
                        }
                        break;

                    default:
                        this.jj_la1[55] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
        //UPGRADE_NOTE: ��ǩ��label_19_brk������ӡ� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1011'"

label_19_brk: ;

        }

        public void UnaryExpression()
        {
            if (this.jj_2_11(2))
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.WHITESPACE:
                        this.jj_consume_token(ParserConstants.WHITESPACE);
                        break;

                    default:
                        this.jj_la1[56] = this.jj_gen;
                        ;
                        break;

                }
                this.jj_consume_token(ParserConstants.LOGICAL_NOT);
                ASTNotNode jjtn001 = new ASTNotNode(this, ParserTreeConstants.JJTNOTNODE);
                bool jjtc001 = true;
                this.jjtree.OpenNodeScope(jjtn001);
                try
                {
                    this.UnaryExpression();
                }
                //UPGRADE_NOTE: �쳣 'java.lang.Throwable' ��ת��Ϊ���в�ͬ����Ϊ�� 'System.Exception'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1100'"
                catch (System.Exception jjte001)
                {
                    if (jjtc001)
                    {
                        this.jjtree.ClearNodeScope(jjtn001);
                        jjtc001 = false;
                    }
                    else
                    {
                        this.jjtree.PopNode();
                    }
                    if (jjte001 is System.SystemException)
                    {
                        {
                            if (true)
                                throw (System.SystemException)jjte001;
                        }
                    }
                    if (jjte001 is ParseException)
                    {
                        {
                            if (true)
                                throw (ParseException)jjte001;
                        }
                    }
                    {
                        if (true)
                            throw (System.ApplicationException)jjte001;
                    }
                }
                finally
                {
                    if (jjtc001)
                    {
                        this.jjtree.CloseNodeScope(jjtn001, 1);
                    }
                }
            }
            else
            {
                switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                {

                    case ParserConstants.LBRACKET:
                    case ParserConstants.LEFT_CURLEY:
                    case ParserConstants.LPAREN:
                    case ParserConstants.WHITESPACE:
                    case ParserConstants.STRING_LITERAL:
                    case ParserConstants.TRUE:
                    case ParserConstants.FALSE:
                    case ParserConstants.INTEGER_LITERAL:
                    case ParserConstants.FLOATING_POINT_LITERAL:
                    case ParserConstants.IDENTIFIER:
                    case ParserConstants.LCURLY:
                        this.PrimaryExpression();
                        break;

                    default:
                        this.jj_la1[57] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();

                }
            }
        }

        public void PrimaryExpression()
        {
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.WHITESPACE:
                    this.jj_consume_token(ParserConstants.WHITESPACE);
                    break;

                default:
                    this.jj_la1[58] = this.jj_gen;
                    ;
                    break;

            }
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.STRING_LITERAL:
                    this.StringLiteral();
                    break;

                case ParserConstants.IDENTIFIER:
                case ParserConstants.LCURLY:
                    this.Reference();
                    break;

                case ParserConstants.INTEGER_LITERAL:
                    this.IntegerLiteral();
                    break;

                default:
                    this.jj_la1[59] = this.jj_gen;
                    if (this.jj_2_12(2147483647))
                    {
                        this.IntegerRange();
                    }
                    else
                    {
                        switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
                        {

                            case ParserConstants.FLOATING_POINT_LITERAL:
                                this.FloatingPointLiteral();
                                break;

                            case ParserConstants.LEFT_CURLEY:
                                this.Map();
                                break;

                            case ParserConstants.LBRACKET:
                                this.ObjectArray();
                                break;

                            case ParserConstants.TRUE:
                                this.True();
                                break;

                            case ParserConstants.FALSE:
                                this.False();
                                break;

                            case ParserConstants.LPAREN:
                                this.jj_consume_token(ParserConstants.LPAREN);
                                this.Expression();
                                this.jj_consume_token(ParserConstants.RPAREN);
                                break;

                            default:
                                this.jj_la1[60] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();

                        }
                    }
                    break;

            }
            switch ((this.jj_ntk_Renamed_Field == -1) ? this.jj_ntk() : this.jj_ntk_Renamed_Field)
            {

                case ParserConstants.WHITESPACE:
                    this.jj_consume_token(ParserConstants.WHITESPACE);
                    break;

                default:
                    this.jj_la1[61] = this.jj_gen;
                    ;
                    break;

            }
        }

        private bool jj_2_1(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_1();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(0, xla);
            }
        }

        private bool jj_2_2(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_2();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(1, xla);
            }
        }

        private bool jj_2_3(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_3();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(2, xla);
            }
        }

        private bool jj_2_4(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_4();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(3, xla);
            }
        }

        private bool jj_2_5(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_5();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(4, xla);
            }
        }

        private bool jj_2_6(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_6();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(5, xla);
            }
        }

        private bool jj_2_7(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_7();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(6, xla);
            }
        }

        private bool jj_2_8(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_8();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(7, xla);
            }
        }

        private bool jj_2_9(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_9();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(8, xla);
            }
        }

        private bool jj_2_10(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_10();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(9, xla);
            }
        }

        private bool jj_2_11(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_11();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(10, xla);
            }
        }

        private bool jj_2_12(int xla)
        {
            this.jj_la = xla; this.jj_lastpos = this.jj_scanpos = this.token;
            try
            {
                return !this.jj_3_12();
            }
            catch (LookaheadSuccess ls)
            {
                return true;
            }
            finally
            {
                this.jj_save(11, xla);
            }
        }

        private bool jj_3_1()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_21()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_64()
        {
            if (this.jj_scan_token(ParserConstants.LBRACKET))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_71())
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.RBRACKET))
                return true;
            return false;
        }

        private bool jj_3R_70()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            return false;
        }

        private bool jj_3_5()
        {
            if (this.jj_3R_25())
                return true;
            if (this.jj_scan_token(ParserConstants.COLON))
                return true;
            if (this.jj_3R_25())
                return true;
            Token xsp;
            while (true)
            {
                xsp = this.jj_scanpos;
                if (this.jj_3R_85())
                {
                    this.jj_scanpos = xsp; break;
                }
            }
            return false;
        }

        private bool jj_3R_63()
        {
            if (this.jj_scan_token(ParserConstants.LEFT_CURLEY))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3_5())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_70())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(7))
            {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(65))
                    return true;
            }
            return false;
        }

        private bool jj_3R_46()
        {
            if (this.jj_3R_66())
                return true;
            return false;
        }

        private bool jj_3R_45()
        {
            if (this.jj_3R_65())
                return true;
            return false;
        }

        private bool jj_3_3()
        {
            if (this.jj_scan_token(ParserConstants.LBRACKET))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_21())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_22())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.DOUBLEDOT))
                return true;
            return false;
        }

        private bool jj_3R_44()
        {
            if (this.jj_3R_64())
                return true;
            return false;
        }

        private bool jj_3R_43()
        {
            if (this.jj_3R_63())
                return true;
            return false;
        }

        private bool jj_3R_42()
        {
            if (this.jj_3R_62())
                return true;
            return false;
        }

        private bool jj_3R_41()
        {
            if (this.jj_3R_61())
                return true;
            return false;
        }

        private bool jj_3R_40()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_39()
        {
            if (this.jj_3R_60())
                return true;
            return false;
        }

        private bool jj_3R_38()
        {
            if (this.jj_3R_59())
                return true;
            return false;
        }

        private bool jj_3R_23()
        {
            if (this.jj_scan_token(ParserConstants.COMMA))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            return false;
        }

        private bool jj_3R_37()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_24()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_37())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_38())
                {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_39())
                    {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_40())
                        {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_41())
                            {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_42())
                                {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_43())
                                    {
                                        this.jj_scanpos = xsp;
                                        if (this.jj_3R_44())
                                        {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_3R_45())
                                            {
                                                this.jj_scanpos = xsp;
                                                if (this.jj_3R_46())
                                                    return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        private bool jj_3R_59()
        {
            if (this.jj_scan_token(ParserConstants.WORD))
                return true;
            return false;
        }

        private bool jj_3R_56()
        {
            if (this.jj_scan_token(ParserConstants.IDENTIFIER))
                return true;
            return false;
        }

        private bool jj_3R_30()
        {
            if (this.jj_3R_56())
                return true;
            return false;
        }

        private bool jj_3R_28()
        {
            if (this.jj_3R_56())
                return true;
            return false;
        }

        private bool jj_3R_33()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3_4()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_23())
                this.jj_scanpos = xsp;
            if (this.jj_3R_24())
                return true;
            return false;
        }

        private bool jj_3R_60()
        {
            if (this.jj_scan_token(ParserConstants.STRING_LITERAL))
                return true;
            return false;
        }

        private bool jj_3R_36()
        {
            if (this.jj_scan_token(ParserConstants.INTEGER_LITERAL))
                return true;
            return false;
        }

        private bool jj_3R_32()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_27()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_62()
        {
            if (this.jj_scan_token(ParserConstants.FLOATING_POINT_LITERAL))
                return true;
            return false;
        }

        private bool jj_3_10()
        {
            if (this.jj_3R_29())
                return true;
            return false;
        }

        private bool jj_3R_82()
        {
            if (this.jj_scan_token(ParserConstants.COMMA))
                return true;
            if (this.jj_3R_25())
                return true;
            return false;
        }

        private bool jj_3_8()
        {
            if (this.jj_3R_29())
                return true;
            return false;
        }

        private bool jj_3R_26()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_66()
        {
            if (this.jj_scan_token(ParserConstants.FALSE))
                return true;
            return false;
        }

        private bool jj_3R_65()
        {
            if (this.jj_scan_token(ParserConstants.TRUE))
                return true;
            return false;
        }

        private bool jj_3_9()
        {
            if (this.jj_scan_token(ParserConstants.DOT))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3_10())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_30())
                    return true;
            }
            return false;
        }

        private bool jj_3R_57()
        {
            if (this.jj_3R_25())
                return true;
            Token xsp;
            while (true)
            {
                xsp = this.jj_scanpos;
                if (this.jj_3R_82())
                {
                    this.jj_scanpos = xsp; break;
                }
            }
            return false;
        }

        private bool jj_3_7()
        {
            if (this.jj_scan_token(ParserConstants.DOT))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3_8())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_28())
                    return true;
            }
            return false;
        }

        private bool jj_3R_35()
        {
            if (this.jj_scan_token(ParserConstants.LCURLY))
                return true;
            if (this.jj_scan_token(ParserConstants.IDENTIFIER))
                return true;
            Token xsp;
            while (true)
            {
                xsp = this.jj_scanpos;
                if (this.jj_3_9())
                {
                    this.jj_scanpos = xsp; break;
                }
            }
            if (this.jj_scan_token(ParserConstants.RCURLY))
                return true;
            return false;
        }

        private bool jj_3_12()
        {
            if (this.jj_scan_token(ParserConstants.LBRACKET))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_32())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_33())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.DOUBLEDOT))
                return true;
            return false;
        }

        private bool jj_3R_34()
        {
            if (this.jj_scan_token(ParserConstants.IDENTIFIER))
                return true;
            Token xsp;
            while (true)
            {
                xsp = this.jj_scanpos;
                if (this.jj_3_7())
                {
                    this.jj_scanpos = xsp; break;
                }
            }
            return false;
        }

        private bool jj_3R_81()
        {
            if (this.jj_scan_token(ParserConstants.LPAREN))
                return true;
            return false;
        }

        private bool jj_3R_80()
        {
            if (this.jj_3R_66())
                return true;
            return false;
        }

        private bool jj_3R_79()
        {
            if (this.jj_3R_65())
                return true;
            return false;
        }

        private bool jj_3R_20()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_34())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_35())
                    return true;
            }
            return false;
        }

        private bool jj_3R_78()
        {
            if (this.jj_3R_64())
                return true;
            return false;
        }

        private bool jj_3R_77()
        {
            if (this.jj_3R_63())
                return true;
            return false;
        }

        private bool jj_3R_76()
        {
            if (this.jj_3R_62())
                return true;
            return false;
        }

        private bool jj_3R_75()
        {
            if (this.jj_3R_61())
                return true;
            return false;
        }

        private bool jj_3R_74()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_73()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3_6()
        {
            if (this.jj_scan_token(ParserConstants.LBRACKET))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_26())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_27())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.DOUBLEDOT))
                return true;
            return false;
        }

        private bool jj_3_2()
        {
            if (this.jj_scan_token(ParserConstants.DOUBLE_ESCAPE))
                return true;
            return false;
        }

        private bool jj_3R_29()
        {
            if (this.jj_3R_56())
                return true;
            if (this.jj_scan_token(ParserConstants.LPAREN))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_57())
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.REFMOD2_RPAREN))
                return true;
            return false;
        }

        private bool jj_3R_72()
        {
            if (this.jj_3R_60())
                return true;
            return false;
        }

        private bool jj_3R_67()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_72())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_73())
                {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_74())
                    {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_75())
                        {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_76())
                            {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_77())
                                {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_78())
                                    {
                                        this.jj_scanpos = xsp;
                                        if (this.jj_3R_79())
                                        {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_3R_80())
                                            {
                                                this.jj_scanpos = xsp;
                                                if (this.jj_3R_81())
                                                    return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return false;
        }

        private bool jj_3R_55()
        {
            if (this.jj_3R_62())
                return true;
            return false;
        }

        private bool jj_3R_54()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_53()
        {
            if (this.jj_3R_66())
                return true;
            return false;
        }

        private bool jj_3R_52()
        {
            if (this.jj_3R_65())
                return true;
            return false;
        }

        private bool jj_3R_31()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3_11())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_58())
                    return true;
            }
            return false;
        }

        private bool jj_3_11()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.LOGICAL_NOT))
                return true;
            if (this.jj_3R_31())
                return true;
            return false;
        }

        private bool jj_3R_58()
        {
            if (this.jj_3R_67())
                return true;
            return false;
        }

        private bool jj_3R_51()
        {
            if (this.jj_3R_64())
                return true;
            return false;
        }

        private bool jj_3R_85()
        {
            if (this.jj_scan_token(ParserConstants.COMMA))
                return true;
            if (this.jj_3R_25())
                return true;
            if (this.jj_scan_token(ParserConstants.COLON))
                return true;
            if (this.jj_3R_25())
                return true;
            return false;
        }

        private bool jj_3R_50()
        {
            if (this.jj_3R_63())
                return true;
            return false;
        }

        private bool jj_3R_49()
        {
            if (this.jj_3R_61())
                return true;
            return false;
        }

        private bool jj_3R_48()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_47()
        {
            if (this.jj_3R_60())
                return true;
            return false;
        }

        private bool jj_3R_84()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_69()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_86()
        {
            if (this.jj_scan_token(ParserConstants.COMMA))
                return true;
            if (this.jj_3R_25())
                return true;
            return false;
        }

        private bool jj_3R_25()
        {
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_47())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_48())
                {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_49())
                    {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_50())
                        {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_51())
                            {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_52())
                                {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_53())
                                    {
                                        this.jj_scanpos = xsp;
                                        if (this.jj_3R_54())
                                        {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_3R_55())
                                                return true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            return false;
        }

        private bool jj_3R_83()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_22()
        {
            if (this.jj_3R_36())
                return true;
            return false;
        }

        private bool jj_3R_68()
        {
            if (this.jj_3R_20())
                return true;
            return false;
        }

        private bool jj_3R_71()
        {
            if (this.jj_3R_25())
                return true;
            Token xsp;
            while (true)
            {
                xsp = this.jj_scanpos;
                if (this.jj_3R_86())
                {
                    this.jj_scanpos = xsp; break;
                }
            }
            return false;
        }

        private bool jj_3R_61()
        {
            if (this.jj_scan_token(ParserConstants.LBRACKET))
                return true;
            Token xsp;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_68())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_69())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.DOUBLEDOT))
                return true;
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            xsp = this.jj_scanpos;
            if (this.jj_3R_83())
            {
                this.jj_scanpos = xsp;
                if (this.jj_3R_84())
                    return true;
            }
            xsp = this.jj_scanpos;
            if (this.jj_scan_token(26))
                this.jj_scanpos = xsp;
            if (this.jj_scan_token(ParserConstants.RBRACKET))
                return true;
            return false;
        }

        public ParserTokenManager token_source;
        public Token token, jj_nt;
        private int jj_ntk_Renamed_Field;
        private Token jj_scanpos, jj_lastpos;
        private int jj_la;
        public bool lookingAhead = false;
        private bool jj_semLA;
        private int jj_gen;
        //UPGRADE_NOTE: Final �Ѵӡ�jj_la1 �����������Ƴ��� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        private int[] jj_la1 = new int[62];
        private static int[] jj_la1_0_Renamed_Field;
        private static int[] jj_la1_1_Renamed_Field;
        private static int[] jj_la1_2_Renamed_Field;
        private static void jj_la1_0()
        {
            jj_la1_0_Renamed_Field = new int[] { 0x9bc1b00, 0x0, 0x9bc1b00, 0x400000, 0x1840000, 0x8000000, 0x30000042, 0x0, 0x4000000, 0x4000000, 0x4000000, 0x8, 0x4000000, 0x9bc1b00, 0x8, 0x4000000, 0x80, 0x8, 0x3c000042, 0x4000000, 0x0, 0x4000000, 0x4000000, 0x0, 0x4000000, 0x4000000, 0x8000000, 0x30000042, 0x4000000, 0x8, 0x3c000042, 0x0, 0x0, 0x0, 0x8300300, 0x4000000, 0x9bc1b00, 0x0, 0x0, 0x0, 0x9bc1b00, 0x4000000, 0x9bc1b00, 0x4000000, 0x4000000, 0x40000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, unchecked((int)0x80000000), unchecked((int)0x80000000), 0x0, 0x0, 0x4000000, 0x3c000142, 0x4000000, 0x8000000, 0x30000142, 0x4000000 };
        }
        private static void jj_la1_1()
        {
            jj_la1_1_Renamed_Field = new int[] { unchecked((int)0xc6348000), 0x48000, unchecked((int)0x86300000), 0x0, 0x0, 0x42100000, 0x200000, 0x6000000, 0x0, 0x0, 0x0, 0x0, 0x0, unchecked((int)0xc6348000), 0x0, 0x0, 0x0, 0x0, 0x40300000, 0x0, 0x40100000, 0x0, 0x0, 0x40100000, 0x0, 0x0, 0x100000, 0x40200000, 0x0, 0x0, 0x40300000, 0x40000000, 0x40000000, 0x40000000, unchecked((int)0x80300000), 0x0, unchecked((int)0xc6348000), 0x10000, 0x10000, 0x20000, unchecked((int)0xc6348000), 0x0, unchecked((int)0xc6348000), 0x0, 0x0, 0x0, 0x20, 0x10, 0xc00, 0xc00, 0x3c0, 0x3c0, 0x1, 0x1, 0xe, 0xe, 0x0, 0x40300000, 0x0, 0x40100000, 0x200000, 0x0 };
        }
        private static void jj_la1_2()
        {
            jj_la1_2_Renamed_Field = new int[] { 0x3, 0x0, 0x3, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x2, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x0, 0x0, 0x1, 0x3, 0x0, 0x3, 0x0, 0x0, 0x0, 0x3, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x0 };
        }
        //UPGRADE_NOTE: Final �Ѵӡ�jj_2_rtns �����������Ƴ��� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        //UPGRADE_NOTE: ��jj_2_rtns���ĳ�ʼ�����ƶ��� ������InitBlock���� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1005'"
        private JJCalls[] jj_2_rtns;
        private bool jj_rescan = false;
        private int jj_gc = 0;

        public Parser(ICharStream stream)
        {
            this.InitBlock();
            this.token_source = new ParserTokenManager(stream);
            this.token = new Token();
            this.jj_ntk_Renamed_Field = -1;
            this.jj_gen = 0;
            for (int i = 0; i < 62; i++)
                this.jj_la1[i] = -1;
            for (int i = 0; i < this.jj_2_rtns.Length; i++)
                this.jj_2_rtns[i] = new JJCalls();
        }

        public virtual void ReInit(ICharStream stream)
        {
            this.token_source.ReInit(stream);
            this.token = new Token();
            this.jj_ntk_Renamed_Field = -1;
            this.jjtree.Reset();
            this.jj_gen = 0;
            for (int i = 0; i < 62; i++)
                this.jj_la1[i] = -1;
            for (int i = 0; i < this.jj_2_rtns.Length; i++)
                this.jj_2_rtns[i] = new JJCalls();
        }

        public Parser(ParserTokenManager tm)
        {
            this.InitBlock();
            this.token_source = tm;
            this.token = new Token();
            this.jj_ntk_Renamed_Field = -1;
            this.jj_gen = 0;
            for (int i = 0; i < 62; i++)
                this.jj_la1[i] = -1;
            for (int i = 0; i < this.jj_2_rtns.Length; i++)
                this.jj_2_rtns[i] = new JJCalls();
        }

        public virtual void ReInit(ParserTokenManager tm)
        {
            this.token_source = tm;
            this.token = new Token();
            this.jj_ntk_Renamed_Field = -1;
            this.jjtree.Reset();
            this.jj_gen = 0;
            for (int i = 0; i < 62; i++)
                this.jj_la1[i] = -1;
            for (int i = 0; i < this.jj_2_rtns.Length; i++)
                this.jj_2_rtns[i] = new JJCalls();
        }

        private Token jj_consume_token(int kind)
        {
            Token oldToken;
            if ((oldToken = this.token).Next != null)
                this.token = this.token.Next;
            else
                this.token = this.token.Next = this.token_source.NextToken;
            this.jj_ntk_Renamed_Field = -1;
            if (this.token.Kind == kind)
            {
                this.jj_gen++;
                if (++this.jj_gc > 100)
                {
                    this.jj_gc = 0;
                    for (int i = 0; i < this.jj_2_rtns.Length; i++)
                    {
                        JJCalls c = this.jj_2_rtns[i];
                        while (c != null)
                        {
                            if (c.gen < this.jj_gen)
                                c.first = null;
                            c = c.next;
                        }
                    }
                }
                return this.token;
            }
            this.token = oldToken;
            this.jj_kind = kind;
            throw this.generateParseException();
        }

        [Serializable]
        private sealed class LookaheadSuccess : System.ApplicationException
        {
        }
        //UPGRADE_NOTE: Final �Ѵӡ�jj_ls �����������Ƴ��� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1003'"
        //UPGRADE_NOTE: ��jj_ls���ĳ�ʼ�����ƶ��� ������InitBlock���� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1005'"
        private LookaheadSuccess jj_ls;
        private bool jj_scan_token(int kind)
        {
            if (this.jj_scanpos == this.jj_lastpos)
            {
                this.jj_la--;
                if (this.jj_scanpos.Next == null)
                {
                    this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.Next = this.token_source.NextToken;
                }
                else
                {
                    this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.Next;
                }
            }
            else
            {
                this.jj_scanpos = this.jj_scanpos.Next;
            }
            if (this.jj_rescan)
            {
                int i = 0; Token tok = this.token;
                while (tok != null && tok != this.jj_scanpos)
                {
                    i++; tok = tok.Next;
                }
                if (tok != null)
                    this.jj_add_error_token(kind, i);
            }
            if (this.jj_scanpos.Kind != kind)
                return true;
            if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos)
                throw this.jj_ls;
            return false;
        }

        public Token getToken(int index)
        {
            Token t = this.lookingAhead ? this.jj_scanpos : this.token;
            for (int i = 0; i < index; i++)
            {
                if (t.Next != null)
                    t = t.Next;
                else
                    t = t.Next = this.token_source.NextToken;
            }
            return t;
        }

        private int jj_ntk()
        {
            if ((this.jj_nt = this.token.Next) == null)
                return (this.jj_ntk_Renamed_Field = (this.token.Next = this.token_source.NextToken).Kind);
            else
                return (this.jj_ntk_Renamed_Field = this.jj_nt.Kind);
        }

        private ArrayList jj_expentries = new ArrayList(10);
        private int[] jj_expentry;
        private int jj_kind = -1;
        private int[] jj_lasttokens = new int[100];
        private int jj_endpos;

        private void jj_add_error_token(int kind, int pos)
        {
            if (pos >= 100)
                return;
            if (pos == this.jj_endpos + 1)
            {
                this.jj_lasttokens[this.jj_endpos++] = kind;
            }
            else if (this.jj_endpos != 0)
            {
                this.jj_expentry = new int[this.jj_endpos];
                for (int i = 0; i < this.jj_endpos; i++)
                {
                    this.jj_expentry[i] = this.jj_lasttokens[i];
                }
                bool exists = false;
                //UPGRADE_TODO: ������java.util.Enumeration.hasMoreElements����ת��Ϊ���в�ͬ��Ϊ�� 'System.Collections.IEnumerator.MoveNext'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationhasMoreElements'"
                for (System.Collections.IEnumerator e = this.jj_expentries.GetEnumerator(); e.MoveNext(); )
                {
                    //UPGRADE_TODO: ������java.util.Enumeration.nextElement����ת��Ϊ���в�ͬ��Ϊ�� 'System.Collections.IEnumerator.Current'�� "ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1073_javautilEnumerationnextElement'"
                    int[] oldentry = (int[])(e.Current);
                    if (oldentry.Length == this.jj_expentry.Length)
                    {
                        exists = true;
                        for (int i = 0; i < this.jj_expentry.Length; i++)
                        {
                            if (oldentry[i] != this.jj_expentry[i])
                            {
                                exists = false;
                                break;
                            }
                        }
                        if (exists)
                            break;
                    }
                }
                if (!exists)
                    this.jj_expentries.Add(this.jj_expentry);
                if (pos != 0)
                    this.jj_lasttokens[(this.jj_endpos = pos) - 1] = kind;
            }
        }

        public virtual ParseException generateParseException()
        {
            this.jj_expentries.Clear();
            bool[] la1tokens = new bool[68];
            for (int i = 0; i < 68; i++)
            {
                la1tokens[i] = false;
            }
            if (this.jj_kind >= 0)
            {
                la1tokens[this.jj_kind] = true;
                this.jj_kind = -1;
            }
            for (int i = 0; i < 62; i++)
            {
                if (this.jj_la1[i] == this.jj_gen)
                {
                    for (int j = 0; j < 32; j++)
                    {
                        if ((jj_la1_0_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[j] = true;
                        }
                        if ((jj_la1_1_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[32 + j] = true;
                        }
                        if ((jj_la1_2_Renamed_Field[i] & (1 << j)) != 0)
                        {
                            la1tokens[64 + j] = true;
                        }
                    }
                }
            }
            for (int i = 0; i < 68; i++)
            {
                if (la1tokens[i])
                {
                    this.jj_expentry = new int[1];
                    this.jj_expentry[0] = i;
                    this.jj_expentries.Add(this.jj_expentry);
                }
            }
            this.jj_endpos = 0;
            this.jj_rescan_token();
            this.jj_add_error_token(0, 0);
            int[][] exptokseq = new int[this.jj_expentries.Count][];
            for (int i = 0; i < this.jj_expentries.Count; i++)
            {
                exptokseq[i] = (int[])this.jj_expentries[i];
            }
            return new ParseException(this.token, exptokseq, ParserConstants.TokenImage);
        }

        private void jj_rescan_token()
        {
            this.jj_rescan = true;
            for (int i = 0; i < 12; i++)
            {
                JJCalls p = this.jj_2_rtns[i];
                do
                {
                    if (p.gen > this.jj_gen)
                    {
                        this.jj_la = p.arg; this.jj_lastpos = this.jj_scanpos = p.first;
                        switch (i)
                        {

                            case 0: this.jj_3_1(); break;

                            case 1: this.jj_3_2(); break;

                            case 2: this.jj_3_3(); break;

                            case 3: this.jj_3_4(); break;

                            case 4: this.jj_3_5(); break;

                            case 5: this.jj_3_6(); break;

                            case 6: this.jj_3_7(); break;

                            case 7: this.jj_3_8(); break;

                            case 8: this.jj_3_9(); break;

                            case 9: this.jj_3_10(); break;

                            case 10: this.jj_3_11(); break;

                            case 11: this.jj_3_12(); break;
                        }
                    }
                    p = p.next;
                }
                while (p != null);
            }
            this.jj_rescan = false;
        }

        private void jj_save(int index, int xla)
        {
            JJCalls p = this.jj_2_rtns[index];
            while (p.gen > this.jj_gen)
            {
                if (p.next == null)
                {
                    p = p.next = new JJCalls(); break;
                }
                p = p.next;
            }
            p.gen = this.jj_gen + xla - this.jj_la; p.first = this.token; p.arg = xla;
        }

        internal sealed class JJCalls
        {
            internal int gen;
            internal Token first;
            internal int arg;
            internal JJCalls next;
        }
        static Parser()
        {
            {
                jj_la1_0();
                jj_la1_1();
                jj_la1_2();
            }
        }
    }
}